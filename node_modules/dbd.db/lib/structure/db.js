const fs = require('fs')
const Util = require('../util')
const DBDError = require('./dbdError')
const BaseCollection = require('./collection')
const { EventEmitter } = require('events')

/**
 * The main hub to interact with the database
 * @extends {EventEmitter}
 */
class Database extends EventEmitter {
	/**
	 * @param {!String} name The name for the storage
	 */
	constructor(name) {
		if (typeof name !== 'string') throw new DBDError('Name must be typeof string!', 1)

		if (name.includes('/')) throw new DBDError('/ in filename is not allowed!', 4)

		if (name.includes('\\')) throw new DBDError('\ in filename is not allowed!', 4)

		super()

		this.ready = false
		this.name = name
		this.cache = new Map()
		this.collections = new Map()

		this.once('ready', () => {
			this.ready = true
		})

		new Promise(async (resolve, reject) => {
			await Util.createStorage(name).catch(reject)

			this.emit('ready')
		})
	}
	
	/**
	 * The database name
   * @returns {String}
	 */
	get displayName() {
	  return this.name
	}
	
	/**
	 * The condition if the Database is ready to use
   * @returns {Boolean}
	 */
	
	get isReady() {
	  return this.ready
	}

	/**
	 * The hub to interact with the collections
	 * @param {!Object} opts The options for the collection
	 * @returns {Promise<BaseCollection>}
	 */
	async collection(opts) {
		if (typeof opts.name !== 'string') throw new DBDError('Collection name must be a string!', 2)

		if (opts.name.includes('/')) throw new DBDError('/ in filename is not allowed!', 4)

		if (opts.name.includes('\\')) throw new DBDError('\ in filename is not allowed!', 4)

		if (typeof opts.ttl === 'number' && opts.ttl < 15) throw new DBDError('TTL check interval must be 15 seconds at minimal!', 5)
		
		if (!this.ready) await new Promise(async (resolve, reject) => {
			this.once('ready', resolve)
			
			if (this.ready) resolve()
		})

		if (this.collections.has(opts.name))
			return this.collections.get(opts.name)

		const col = new BaseCollection(this, opts)

		this.collections.set(opts.name, col)

		return col
	}
}

module.exports = Database