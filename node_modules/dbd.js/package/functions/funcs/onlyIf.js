const errorHandler = require("../../handlers/errors.js")

const onlyIf = async d =>{

    const code = d.command.code

    const r = code.split("$onlyIf[").length - 1

    const inside = code.split("$onlyIf[")[r].split("]")[0]

    const p = inside.split(";")
    
    const condition = p.shift()
    
    const errorMessage = p.join(";")

    const operators = () => {
        for (const op of ["<=", ">=", "==", "!=", "<", ">"]) {
            if (condition.includes(op)) return op
        }
    }

    const op = operators()

    if (!operators) return d.error(`:x: No valid operator in \`$onlyIf[${inside}]\``)

    const fields = condition.split(op)

    let pass = true 
    
    if (op === "<=") {
        if (Number(fields[0]) > Number(fields[1])) pass = false
    } else if (op === ">=") {
        if (Number(fields[0]) < Number(fields[1])) pass = false
    } else if (op === "==") {
        if (fields[0].addBrackets() !== fields[1].addBrackets())  pass = false
    } else if (op === "<") {
        if (Number(fields[0]) >= Number(fields[1])) pass = false
    } else if (op === ">") {
        if (Number(fields[0]) <= Number(fields[1])) pass = false
    } else if (op === "!=") {
        if (fields[0].addBrackets() === fields[1].addBrackets()) pass = false
    }

    if (!pass) return errorHandler(d, errorMessage)

    return {
        code: code.replaceLast(`$onlyIf[${inside}]`, "")
    }
}

module.exports = onlyIf