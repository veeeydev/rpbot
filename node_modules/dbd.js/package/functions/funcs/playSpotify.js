const search = require("yt-search")
const djs = require("discord.js")
const embed = require("../../handlers/errors")
const execute = require("../../handlers/MusicPlayer")
const spotify = require('spotify-url-info')
const msp = require("ms-parser")
const pms = require("parse-ms")
var timeout;
module.exports = async d => {
    const code = d.command.code
    
    const inside = code.split("$playSpotify[")[1].split("]")[0]
 let [
        url,
        showsuccess = "",
        time = "1s",
        deafen = false,
        error = ":x: Error while making the request."
    ] = inside.split(";")
    let list = ""
    try{
        time = msp(time).ms
      } catch {
        time = msp("1s").ms
      }
      deafen = (deafen === "yes")
    try{
    list = await spotify.getTracks(url)
    } catch (err) {
        return embed(d, error)
    }
    let awaits = [] 
    let playlist = []      
    
    async function awaitPlays(songname) {
        var videos = await search(song.name)
        const video = videos.videos[0]
        const data = {
            title: () => video.title.removeBrackets(),
            description: () => video.description,
            duration: () => video.duration.toString().split("seconds").join("Seconds"),
            duration_left: (server) => {
          if(!server) return;
          const ms = msp(data.duration().split(" ")[0] + "s").ms
          const time = Math.floor(ms - new Date(server.connection.dispatcher.streamTime - server.connection.dispatcher.pausedTime))
          const ISO = new Date(time).toISOString().substr(11, 11).split(":")
          
          if (ISO[0] === "00") {
            ISO.shift()
           ISO[1] = Math.floor(parseInt(ISO[1]))

           if (ISO[1].toString().length === 1) ISO[1] = "0" + ISO[1].toString()

          } else {
           ISO[2] = Math.floor(parseInt(ISO[2]))

           if (ISO[2].toString().length === 1) ISO[2] = "0" + ISO[2].toString()
          }
          
          return `${Math.floor(time / 1000)} Seconds (${ISO.join(":")})`
        },
            userID: () => d.message.author.id,
            thumbnail: () => video.thumbnail,
            publisher: () => video.author.name,
            publisher_url: () => video.author.url,
            url: () => "https://www.youtube.com/watch?v="+video.videoId,
            stream: "ytdl",
            prune:false
        }
        playlist.push(data)
    }                                   
        for(var song of list) {
            awaits.push(awaitPlays(song.name))
            }
            await Promise.all(awaits)


    const server = d.client.servers.get(d.message.guild.id)

    if (!server) {
        const vc = d.message.member.voice.channel
        if (!vc) return embed(d, error)
        let connection
        try{
                 connection = await vc.join()
        } catch(err) {
            console.error("I was unable to Join, Reason: \n" +err)
            return embed(d, "I was unable to join, Error: "+err.message)
        }
        const constructor = {
            voice: d.message.member.voice.channel,
            connection: connection,
            songs: playlist,
            loopSong: false,
            loopQueue: false,
            volume: null,
            text: d.message.channel,
            playing: true,
            state:"ENDED",
            vc_legacy:time,
        deafen:deafen,
		pruneEnabled:false
        }
        constructor.volume = 100
        d.client.servers.set(d.message.guild.id, constructor)

        try {
            await execute(d, true) 
        } catch (err) {
            console.log(err)

            return embed(d, error)
        }
    } else {
        for(var data of playlist) {
            server.songs.push(data)
            }
        d.client.servers.set(d.message.guild.id, server)
        if(server.state === "ENDED") {
            await clearTimeout(timeout)
            await execute(d, true, error)
        }
    }
     
    if(showsuccess.toLowerCase() === "number") {
        return {
            code: code.replaceLast(`$playSpotify[${inside}]`, playlist.length+"/"+list.data.length)
        }
    } else if(showsuccess.toLowerCase() === "name") {
        return {
            code: code.replaceLast(`$playSpotify[${inside}]`, playlist.map(song => song.title.addBrackets()).join(", "))
        }
    } else {
    return { 
        code: code.replaceLast(`$playSpotify[${inside}]`, "")
    }
}
}