
module.exports = async d => {

    const code = d.command.code

    const r = code.split("$userLeaderboard[").length - 1

    const inside = code.split("$userLeaderboard[")[r].split("]")[0]

    const [
        variable,
        type = "asc",
        custom = `{top}.- {username} - {value}`,
        list = 10,
        page = 1
    ] = inside.split(";")

    const all = await d.client.db.find({
            //F---,
            //_LMIAOD
            variable: variable
    })

    let y = 0

    let content = []

    for (const data of all.filter(e => e.varID.includes(d.message.guild.id)).sort((x, y) => Number(y.value) - Number(x.value))) {
        const member = d.message.guild.members.cache.get(data.varID.split("_")[1])

        if (member) {
            y++

            let text = custom.replace(`{top}`, y).replace("{id}", member.user.id).replace(`{username}`, member.user.username.removeBrackets()).replace(`{value}`, Number(data.value))
            
            if (custom.includes("{execute:")) {
                const awaited = d.client.awaited_commands.find(c => c.name === custom.split("{execute:")[1].split("}")[0]) 
                if (!awaited) return d.error(`‚ùå Invalid awaited command in \`$userLeaderboard[${inside}]\``) 
                
                const CODE = await d.interpreter(d.client, {
                    author: member.user,
                    member: member, 
                    guild: d.message.guild,
                    channel: d.message.channel
                }, d.args, awaited, undefined, true)
                
                text = text.replace(`{execute:${custom.split("{execute:")[1].split("}")[0]}}`, CODE) 
            }
            
            content.push(text) 
        }
    }
    
    if (type === "desc") content = content.reverse()

    const px = page * list - list, py = page * list

    return {
        code: code.replaceLast(`$userLeaderboard[${inside}]`, content.slice(px, py).join("\n"))
    }
    //yeah
//it so longg
}