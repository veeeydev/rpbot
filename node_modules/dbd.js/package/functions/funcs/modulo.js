const modulo = async d => {

    const code = d.command.code

    const r = code.split("$modulo").length - 1

    const inside = code.split("$modulo[")[r].split("]")[0]

    const fields = inside.split(";")

    if (fields.some(n => isNaN(Number(n)))) return d.error(`:x: Invalid number in \`$modulo[${inside}]\``)

    const n = fields.reduce((x, y) => Number(x) % Number(y))

    return {
        code: code.replaceLast(`$modulo[${inside}]`, n)
    }
}

module.exports = modulo