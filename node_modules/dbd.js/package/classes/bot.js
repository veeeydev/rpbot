const Discord = require("discord.js")

const LocalDatabase = require("dbd.db")

const Database = new LocalDatabase("database")

const interpreter = require("../interpreter.js")

const Interaction = require("./Interaction") 
const opts = require("../utils/options")

const shardingClient = require("../handlers/shardingClient.js")
 
const client = new Discord.Client({
  partials: [
    "USER",
    "CHANNEL",
    "GUILD_MEMBER",
    "MESSAGE",
    "REACTION"
  ]
})

Database.once("ready", async () => {

  const Collection = await Database.collection({ name:"Variables" })

  Collection.once("ready", async () => {

    console.log("Database connected!")
    client.db = Collection

  })
})

client._api = (url) => `https://discord.com/api/v8/${url.startsWith("/") ? url.slice(1) : url}`  
//DBD.JS :)
const fs = require("fs") 
client.channel_update_commands = new Discord.Collection() 
client.channel_delete_commands = new Discord.Collection() 
client.channel_create_commands = new Discord.Collection() 
client.role_delete_commands = new Discord.Collection() 
client.role_update_commands = new Discord.Collection() 
client.role_create_commands = new Discord.Collection() 
client.presence_commands = new Discord.Collection() 
client.user_update_commands = new Discord.Collection()
client.slash_commands = new Discord.Collection()
client.invite_create_commands = new Discord.Collection() 
client.bot_leave_commands = new Discord.Collection() 
client.invite_delete_commands = new Discord.Collection() 
client.ban_add_commands = new Discord.Collection() 
client.ban_remove_commands = new Discord.Collection()
client.music_start_commands = new Discord.Collection()
client.bot_join_commands = new Discord.Collection()
client.collections = {} 
client.servers = new Discord.Collection()
client.update_commands = new Discord.Collection()
client.join_commands = new Discord.Collection()
client.bot_commands = new Discord.Collection()
client.deleted_commands = new Discord.Collection()
client.ready_commands = new Discord.Collection()
client.variables = {}
client.statuses = new Discord.Collection()
client.leave_commands = new Discord.Collection()
client.awaited_commands = new Discord.Collection()
client.reaction_add_commands = new Discord.Collection()
client.reaction_remove_commands = new Discord.Collection()

const InteractionCreate = require("../events/interactionCreate") 
const InviteCreate = require("../events/inviteCreate") 
const InviteDelete = require("../events/inviteDelete") 
const GuildBanAdd = require("../events/guildBanAdd") 
const GuildBanRemove = require("../events/guildBanRemove") 
const MusicStart = require("../events/musicStart")
const GuildCreate = require("../events/guildCreate")
const GuildDelete = require("../events/guildDelete.js")
const MessageUpdate = require("../events/messageUpdate.js")
const Message = require("../events/message.js")
const Ready = require("../events/ready.js")
const MessageDelete= require("../events/messageDelete.js")
const GuildMemberAdd = require("../events/guildMemberAdd.js")
const GuildMemberRemove = require("../events/guildMemberRemove.js")
const MessageReactionAdd = require("../events/messageReactionAdd.js")
const MessageReactionRemove = require("../events/messageReactionRemove.js")

require("../handlers/UpdateWarning")()

const ForceDisconnect = require("../handlers/ForceDisconnect.js")
client.on("voiceStateUpdate", (oldMember, newMember) => ForceDisconnect(client, oldMember, newMember))

class Client {
  constructor(options = {
    sharding: false,
    shardAmount: null, 
    mobile: false 
  }) {
    
    client.bot = this 
    this.client = client
    
    //this.loadUtils()
    
    if (options.mobile) {
        Discord.Constants.DefaultOptions.ws.properties.$browser = "Discord Android"
        
        console.log(`Enabled mobile presence`)
    }
    
    if (options.sharding) {
      if (options.shardAmount) {
        client.shards = options.shardAmount
      } else client.shards = "auto"
    
      console.log(`Sharding...`)
    }
     if(options.autoUpdate) {
      require("../handlers/AutoUpdate")()
    }

    if(options.dbhToken) client.dbhToken = options.dbhToken;

    if (!options.token) throw new TypeError(`Token wasn't provided.`) 
    
    if (!options.prefix) throw new TypeError(`Prefix wasn't provided.`)
    
    client.prefix = typeof options.prefix === "string" ? [options.prefix] : options.prefix
    
    client.cookie = options.youtubeCookie || "VISITOR_INFO1_LIVE=VANsbBcy7cs; CONSENT=YES+ID.id+; _gcl_au=1.1.1788177018.1607389903; PREF=volume=100&al=id&f5=20000; YSC=Y4oFlIvW2Ws; GPS=1; SID=5wcz-opJGBk0ym8_G0puQgxw3dxPtyq2HxNdomA_eF4HKWgyBXfICvIOVyy-ZWEp1dsiEg.; __Secure-3PSID=5wcz-opJGBk0ym8_G0puQgxw3dxPtyq2HxNdomA_eF4HKWgyMcJ0-W0W0bdJvo6uxBeaQw.; HSID=ARo1XoKczh5pgxn1P; SSID=AsIuZK2kfEmDK_BLH; APISID=nOATngrMeK7N0qhO/AJZmE1IG9arD4mpGH; SAPISID=Wb8NUolnceyEYGK3/APYC_f4tro_ZXS_hW; __Secure-3PAPISID=Wb8NUolnceyEYGK3/APYC_f4tro_ZXS_hW; LOGIN_INFO=AFmmF2swRgIhAPYyOlUFI7tebyB7AQXwdig994yqwqsCijm92YagfSGRAiEA-SBWrWUQT-uj_Q6jA15qkYBU1QdF1DZXAQiJdAOxfHQ:QUQ3MjNmeFlyY3dKMnhHd203UzhFYUxzUzJOYWRBWExaNnBDdWpSZmdTWk9YNFl1UlJRVmE4Zks1VFlYWnZSaHdWYVJ1T1UtNzhWZHJTWW5PcGhqOVp0c2xESTJhcC1JdTNORXV2QTR2Z1ozNHEwVWNIaGVCR2hnLWFWSU5mNXZJZnZnWUpvSjZJR2RDb2FUWFVNRFo4WC14ZUxuSjFwX3ZPcnlVeHpTSFY2LVgwTUZHMndSejl3; SIDCC=AJi4QfGx6Ocm4BUuJrS7LfMJxPDJc5el3vWEbhW8goOuASriE2vacYtbK7SjDsV8qObX5QJd; __Secure-3PSIDCC=AJi4QfGPzgqaAFIgKnZipZU5WgVqcLeFMHcPgRKUh_FspRcG42rPlbb5F0SfdA72PziL6t_8jA"

   

    client.login(options.token).catch(err => TypeError(`Invalid token`)) 
        client.on("ready", () => {
                  Ready(client)
       
        })
  } 
  
  //utils loader 
  /*loadUtils() {
      client.util = {} 
      
      for (const Util of fs.readdirSync("./package/utils/")) {
          client.util[Util.replace(".js", "")] = require(`../utils/${Util}`)
      }
  }*/
  
  channelUpdateCommand(d = {}) {
      client.channel_update_commands.set(Math.floor(Math.random() * 5939293959), d) 
  }
    
  channelDeleteCommand(d = {}) {
      client.channel_delete_commands.set(Math.floor(Math.random() * 5939293959), d) 
  }
  
    
  channelCreateCommand(d = {}) {
      client.channel_create_commands.set(Math.floor(Math.random() * 5939293959), d) 
  }
  interactionCommand(d  ={}) {
      client.slash_commands.set(Math.floor(Math.random() * 58288384832), d)
  }
  
  presenceUpdateCommand(d = {}) {
      client.presence_commands.set(Math.floor(Math.random() * 84584839392929), d)
  }
  
  roleDeleteCommand(d = {}) {
      client.role_delete_commands.set(Math.floor(Math.random() * 84584839392929), d)
  }
  
  roleCreateCommand(d = {}) {
      client.role_create_commands.set(Math.floor(Math.random() * 95833858483), d )
  }
  
  roleUpdateCommand(d = {}) {
      client.role_update_commands.set(Math.floor(Math.random() * 5993838594992), d) 
  }
  
  userUpdateCommand(d = {}) {
      client.user_update_commands.set(Math.floor(Math.random() * 5993838594992), d) 
  }
  
  deletedCommand(d = {}) {
    client.deleted_commands.set(Math.floor(Math.random() * 5838838494939), d) 
  }
  
  botJoinCommand(d = {}) {
      client.bot_join_commands.set(Math.floor(Math.random() * 589392939392), d) 
  }
  
  botLeaveCommand(d = {}) {
      client.bot_leave_commands.set(Math.floor(Math.random() * 488384848338), d)
  }

  readyCommand(d = {}) {
    client.ready_commands.set(Math.floor(Math.random() * 5838838494939), d) 
  }

  reactionAddCommand(d = {}) {
    client.reaction_add_commands.set(Math.floor(Math.random() * 5838838494939), d) 
  }

  reactionRemoveCommand(d = {}) {
    client.reaction_remove_commands.set(Math.floor(Math.random() * 5838838494939), d) 
  }
  
  banAddCommand(d = {}) {
      client.ban_add_commands.set(Math.floor(Math.random() * 4982838484), d) 
  }
  
  banRemoveCommand(d = {}) {
      client.ban_remove_commands.set(Math.floor(Math.random() * 49588393), d)
  }
  
  inviteCreateCommand(d = {}) {
      client.invite_create_commands.set(Math.floor(Math.random() * 294484839), d)
  }
  
  inviteDeleteCommand(d = {}) {
      client.invite_delete_commands.set(Math.floor(Math.random() * 3949583929), d)
  }
  awaitedCommand(d = {}) {
    client.awaited_commands.set(Math.floor(Math.random() * 5838838494939), d) 
  }
  
  leaveCommand(d = {}) {
    client.leave_commands.set(Math.floor(Math.random() * 5838838494939), d) 
  }
  
  updateCommand(d = {}) {
    client.update_commands.set(Math.floor(Math.random() * 5838838494939), d) 
  }

  musicStartCommand(d = {}) {
      client.music_start_commands.set(Math.floor(Math.random() * 583828848), d) 
  } 
  
  joinCommand(d = {}) {
    
    if (!d.channel) throw new Error(`Join Command ${client.join_commands.size} needs a channel!`)
    
    if (!d.code) throw new Error(`Join Command ${client.join_commands.size} needs a code! `)
    
    d.id = Math.floor(Math.random() * 494993848489)
    
    client.join_commands.set(d.id, d) 
    
  } 
  
  status(d = {
    type: new String(),
    text: new String(),
    time: 12,
    url: new String() 
  }) {
    client.statuses.set(client.statuses.size, d) 
  }
  
  command(...args) {
    for (const d of args) {     
    if (!d.name) throw new TypeError(`Command ${client.bot_commands.size} needs a name!`)
    
    if (!d.code) throw new TypeError(`Command ${client.bot_commands.size} needs a code!`)
    
		d.id = Math.floor(Math.random() * 58939248388)
    
    client.bot_commands.set(d.id, d)
    
    }
  } 
  
  //others
  loadCommands(path, debug = false) {
      
    this.path = path 
    
    const folders = fs.readdirSync(path) 
    
    const restFiles = folders.filter(e => e.endsWith(".js"))

    if (!require('path').isAbsolute(path)) path = require('path').resolve(process.cwd(), path)
    
    if (restFiles.length) {
        for (const file of restFiles) {
            const cmdPath = `${path}/${file}` 
            
            delete require.cache[require.resolve(cmdPath)] 
            
            const command = require(cmdPath)
            
            command.path = cmdPath
            
            this.command(command)
            
            if (debug) console.log(`Loaded ${command.name}`) 
        }
    }
    
    for (const folder of folders.filter(e => fs.statSync(`${path}/${e}`).isDirectory())) {
        for (const file of fs.readdirSync(`${path}/${folder}/`)) {
            const cmdPath = `${path}/${folder}/${file}`
            
            delete require.cache[require.resolve(cmdPath)] 
            
            const command = require(cmdPath)
            
            command.path = cmdPath
            
            this.command(command) 
        }
    }
  }

  //events 
  onChannelDelete() {
      client.on("channelCreate", channel => require("../events/channelCreate")(client, channel))
  }
  
  onChannelCreate() {
      client.on("channelDelete", (channel) => require("../events/channelDelete") (client, channel)) 
  }
  
  onChannelUpdate() {
      client.on("channelUpdate", (oldc, newc) => require("../events/channelUpdate")(client, oldc, newc)) 
  }
  onRoleUpdate() {
      client.on("roleUpdate",(oldr, newr) => require("../events/roleUpdate")(client, oldr, newr)) 
  }
  
  onRoleDelete() {
      client.on("roleDelete", (role) => require("../events/roleDelete")(client, role)) 
  }
  
  onRoleCreate() {
      client.on("roleCreate", (role) => require("../events/roleCreate")(client, role))
  }
  onPresenceUpdate() {
      client.on("presenceUpdate", (oldp, newp) => require("../events/presenceUpdate")(client, oldp, newp))
  }
  onUserUpdate() {
      client.on("userUpdate", (old, newu) => require("../events/userUpdate")(client, old, newu))
  }
  
  onInteractionCreate() {
      client.ws.on("INTERACTION_CREATE", data => {
          InteractionCreate(client, new Interaction(client, data))
      })
  }
  
  onInviteCreate() {
      client.on("inviteCreate", (invite) => InviteCreate(client, invite)) 
  }
  
  onInviteDelete() {
      client.on("inviteDelete", (invite) => InviteDelete(client, invite))
  }
  onBanAdd() {
      client.on("guildBanAdd", (guild, user) => GuildBanAdd(client, guild, user))
  }
  
  onBanRemove() {
      client.on("guildBanRemove", (guild, user) => GuildBanRemove(client, guild, user))
  }
  onMusicStart() {
      client.on("musicStart", (server, old) => MusicStart(client, server, old))
  } 
  
  onMessage(options = {
    guildOnly: true,
    respondToBots: false
  }) {

    client.messageEventOptions = options

    client.on("message", message => Message(client, message, client.db) ) 
  } 
  
  onGuildJoin() {
      client.on("guildCreate", (guild) => GuildCreate(client, guild))
  }
  
  onGuildLeave() {
    client.on("guildDelete", (guild) => GuildDelete(client, guild))
  } 
  
  onJoined() {
    client.on("guildMemberAdd", member => GuildMemberAdd(client, member, client.db))
  } 

  onReactionAdd() {
    client.on("messageReactionAdd", (reaction, user) => MessageReactionAdd(client, reaction, user, client.db))
  }

  onReactionRemove() {
    client.on("messageReactionRemove", (reaction, user) => MessageReactionRemove(client, reaction, user, client.db))
  }

  onLeave() {
    client.on("guildMemberRemove", member => GuildMemberRemove(client, member, client.db))
  }

  onMessageUpdate() {
    client.on("messageUpdate", (omsg, msg) => MessageUpdate(client, omsg, msg, client.db))
  }
  
  onMessageDelete() {
    client.on("messageDelete", (msg) => MessageDelete(client, msg, client.db))
  }
  
  variables(op = {}) {
    client.variables = op
  }
}

String.prototype.deleteBrackets = function() {
  return this
  .replace(/\[/g, "#RIGHT#")
  .replace(/\]/g, "#LEFT#")
  .replace(/;/g, "#COLON#")
  .replace(/\$/g, "#CHAR#")
  .replace(/>/g, "#RIGHT_CLICK#")
  .replace(/</g, "#LEFT_CLICK#")
  .replace(/=/g, "#EQUAL#")
  .replace(/{/g, "#RIGHT_BRACKET#")
  .replace(/}/g, "#LEFT_BRACKET#")
}

String.prototype.removeBrackets = String.prototype.deleteBrackets

String.prototype.check = function () {
    return this
    .trim().replace(/\t/g, "").split(/ +/g)[0][0]
}

String.prototype.after = function () {
    const after = this.split("[")[1] 
    
    let inside
    
    let total = "" 
    
    let splits = [] 
    
    if (after) {
        inside = after.split("]")[0] 
        
        total = `[${inside}]` 
        
        splits = inside.split(";") 
    } 
    
    return {
        inside, 
        total, 
        splits
    }
}

String.prototype.addBrackets = function() {
  return this
  .replace(/#RIGHT#/g, "[")
  .replace(/#LEFT#/g, "]")
  .replace(/#COLON#/g, ";")
  .replace(/#CHAR#/g, "$")
  .replace(/#RIGHT_CLICK#/g, ">")
  .replace(/#LEFT_CLICK#/g, "<")
  .replace(/#EQUAL#/g, "=")
  .replace(/#RIGHT_BRACKET#/g, "{") 
  .replace(/#LEFT_BRACKET#/g, "}")
}

Array.prototype.goof = function (sep = "_") {
    return this.map(x => x.split(sep).map(w => w.toLowerCase().replace(w[0].toLowerCase(), w[0].toUpperCase())).join(" ")).join(", ")
}

String.prototype.replaceLast = function(find, replace) {
        var index = this.lastIndexOf(find);

        if (index >= 0) {
            return this.substring(0, index) + replace + this.substring(index + find.length);
        }

        return this.toString();
    }; 

module.exports = Client 